import subprocess
import optparse
import platform
import re


def get_arguments():
    parser = optparse.OptionParser()
    parser.add_option("-i", "--interface", dest="interface", help="Interface to change MAC address")
    parser.add_option("-m", "--mac", dest="new_mac", help="New MAC address")
    (options, arguments) = parser.parse_args()
    if not options.interface:
        parser.error("[-] Please specify an interface, use --help for more info.")
    elif not options.new_mac:
        parser.error("[-] Please specify a new MAC address, use --help for more info.")
    return options


def change_mac_address(interface, new_mac):
    print("[+] Changing MAC address for " + interface + " to " + new_mac)

    if platform.system() == 'Linux':
        with open('/etc/os-release') as f:
            for line in f:
                if line.startswith('ID='):
                    if 'ID=clear-linux-os' != line:
                        subprocess.call(["ifconfig", interface, "down"])
                    else:
                        print("This script doesn't work on Clear Linux.")

    subprocess.call(["ifconfig", interface, "hw", "ether", new_mac])
    subprocess.call(["ifconfig", interface, "up"])


def get_current_mac_address(interface):
    ifconfig_result = subprocess.check_output(["ifconfig", interface]).decode()
    mac_address_search_result = re.search(r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w", ifconfig_result)

    if mac_address_search_result:
        print("[+] Current MAC address is: " + mac_address_search_result.group(0))
    else:
        print("[-] Could not read MAC address.")


options = get_arguments()

get_current_mac_address(options.interface)
change_mac_address(get_arguments().interface, get_arguments().new_mac)

exit(0)
